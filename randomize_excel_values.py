#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –º–æ–º–µ–Ω—Ç–æ–≤ –∑–∞—Ç—è–∂–∫–∏ –≤ Excel —Ñ–∞–π–ª–∞—Ö.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã: –ú–ó 1/60, –ú–ó 2/60, –ú–ó 3/60, –£–ó 3/60, –ú–ó 1/40, –ú–ó 2/40, –ú–ó 3/40
–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: –æ—Ç 20.9 –¥–æ 22.1 —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (–¥–æ 13 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
"""

import pandas as pd
import numpy as np
import os
import glob
import random
import shutil
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
INPUT_DIR = "src/xlsx"  # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
OUTPUT_DIR = "output"   # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
BACKUP_DIR = "backup"   # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π

# –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
TARGET_COLUMNS = [
    "–ú–ó 1/60",
    "–ú–ó 2/60", 
    "–ú–ó 3/60",
    "–£–ó 3/60",
    "–ú–ó 1/40",
    "–ú–ó 2/40",
    "–ú–ó 3/40"
]

# –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –ª—é–±—ã–µ –Ω—É–∂–¥—ã)
MIN_VALUE = 20.9
MAX_VALUE = 22.1

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:
# MIN_VALUE, MAX_VALUE = 0.0, 100.0      # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
# MIN_VALUE, MAX_VALUE = 10.0, 50.0      # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
# MIN_VALUE, MAX_VALUE = 1.0, 10.0       # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
# MIN_VALUE, MAX_VALUE = 100.0, 1000.0   # –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

# –û–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —Ñ–∞–π–ª–æ–≤
PRESERVE_FILE_DATES = True  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
def generate_random_value(min_val=MIN_VALUE, max_val=MAX_VALUE):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —Å 13 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
    """
    return round(random.uniform(min_val, max_val), 13)

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    for directory in [OUTPUT_DIR, BACKUP_DIR]:
        Path(directory).mkdir(exist_ok=True)
        print(f"–°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def backup_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞."""
    filename = os.path.basename(file_path)
    backup_path = os.path.join(BACKUP_DIR, filename)
    
    if not os.path.exists(backup_path):
        shutil.copy2(file_path, backup_path)
        print(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    else:
        print(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_path}")

def preserve_file_timestamps(source_file, target_file):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è) —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π.
    
    Args:
        source_file (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        target_file (str): –ü—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        stat = os.stat(source_file)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É —Ñ–∞–π–ª—É
        # atime - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞, mtime - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        os.utime(target_file, (stat.st_atime, stat.st_mtime))
        
        print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏: {str(e)}")

def process_excel_file(file_path, test_mode=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω Excel —Ñ–∞–π–ª.
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        test_mode (bool): –ï—Å–ª–∏ True, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if not test_mode:
            backup_file(file_path)
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(file_path)
        
        print(f"–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"–°—Ç–æ–ª–±—Ü—ã –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        found_columns = []
        for target_col in TARGET_COLUMNS:
            if target_col in df.columns:
                found_columns.append(target_col)
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–æ–ª–±—Ü—ã (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –≤ –ø—Ä–æ–±–µ–ª–∞—Ö)
                similar_cols = [col for col in df.columns if target_col.replace(" ", "").lower() in col.replace(" ", "").lower()]
                if similar_cols:
                    found_columns.extend(similar_cols)
                    print(f"–ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è '{target_col}': {similar_cols}")
        
        if not found_columns:
            print(f"‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞!")
            return False
        
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {found_columns}")
        
        if test_mode:
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for col in found_columns:
                if col in df.columns:
                    non_null_count = df[col].notna().sum()
                    if non_null_count > 0:
                        current_min = df[col].min()
                        current_max = df[col].max()
                        print(f"  {col}: {non_null_count} –∑–Ω–∞—á–µ–Ω–∏–π, –¥–∏–∞–ø–∞–∑–æ–Ω: {current_min:.4f} - {current_max:.4f}")
                    else:
                        print(f"  {col}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return True
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        changes_made = False
        for col in found_columns:
            if col in df.columns:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                numeric_mask = pd.to_numeric(df[col], errors='coerce').notna()
                numeric_count = numeric_mask.sum()
                
                if numeric_count > 0:
                    print(f"  –û–±–Ω–æ–≤–ª—è–µ–º {numeric_count} –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ '{col}'")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    new_values = [generate_random_value() for _ in range(numeric_count)]
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    df.loc[numeric_mask, col] = new_values
                    changes_made = True
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    sample_values = new_values[:3]
                    print(f"    –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {sample_values}")
                else:
                    print(f"  –í —Å—Ç–æ–ª–±—Ü–µ '{col}' –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        if not changes_made:
            print("‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = os.path.basename(file_path)
        output_path = os.path.join(OUTPUT_DIR, filename)
        
        df.to_excel(output_path, index=False)
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
        if PRESERVE_FILE_DATES:
            preserve_file_timestamps(file_path, output_path)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    global PRESERVE_FILE_DATES
    
    print("üîß –°–∫—Ä–∏–ø—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª–∞—Ö")
    print("=" * 50)
    print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {MIN_VALUE} - {MAX_VALUE}")
    print(f"üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫: {'–í–ö–õ–Æ–ß–ï–ù–û' if PRESERVE_FILE_DATES else '–í–´–ö–õ–Æ–ß–ï–ù–û'}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_files = glob.glob(os.path.join(INPUT_DIR, "*.xlsx"))
    
    if not excel_files:
        print(f"‚ùå –í –ø–∞–ø–∫–µ {INPUT_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤!")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(excel_files)} Excel —Ñ–∞–π–ª–æ–≤")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    print("2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")
    print("3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞")
    print("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        
        if choice == "1":
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            print("\nüîç –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            for i, file_path in enumerate(excel_files[:5], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                print(f"\n--- –§–∞–π–ª {i}/5 ---")
                process_excel_file(file_path, test_mode=True)
                
        elif choice == "2":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(excel_files)} —Ñ–∞–π–ª–æ–≤...")
            
            successful = 0
            failed = 0
            
            for i, file_path in enumerate(excel_files, 1):
                print(f"\n--- –§–∞–π–ª {i}/{len(excel_files)} ---")
                if process_excel_file(file_path):
                    successful += 1
                else:
                    failed += 1
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
            
        elif choice == "3":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            print(f"\nüß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {excel_files[0]}")
            if process_excel_file(excel_files[0]):
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                
        elif choice == "4":
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            print(f"\n‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò")
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {MIN_VALUE} - {MAX_VALUE}")
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫: {'–í–ö–õ–Æ–ß–ï–ù–û' if PRESERVE_FILE_DATES else '–í–´–ö–õ–Æ–ß–ï–ù–û'}")
            print("\n–û–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç:")
            print("- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            print("- –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∏–º–µ—Ç—å —Ç–µ –∂–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ")
            print("- –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            
            toggle_choice = input(f"\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫? (y/n): ").strip().lower()
            if toggle_choice in ['y', 'yes', '–¥', '–¥–∞']:
                PRESERVE_FILE_DATES = not PRESERVE_FILE_DATES
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫: {'–í–ö–õ–Æ–ß–ï–ù–û' if PRESERVE_FILE_DATES else '–í–´–ö–õ–Æ–ß–ï–ù–û'}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            print("\n–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é...")
            main()
            return
                
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()